{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.0.1\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\nimport { libdsvdc } from 'libdsvdcts';\r\n//import { rgbhelper } from 'rgbhelper';\r\n\r\nlet dsDevices: Array<any> = [];\r\n\r\nclass DigitalstromVdc extends utils.Adapter {\r\n    vdc: any;\r\n    setOutputChannel: Array<any> = [];\r\n    allDevices: any = { backEnd: [], frondEnd: [] };\r\n\r\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n        super({\r\n            ...options,\r\n            name: 'digitalstrom-vdc',\r\n        });\r\n        this.on('ready', this.onReady.bind(this));\r\n        this.on('stateChange', this.onStateChange.bind(this));\r\n        this.on('objectChange', this.onObjectChange.bind(this));\r\n        this.on('message', this.onMessage.bind(this));\r\n        this.on('unload', this.onUnload.bind(this));\r\n        this.allDevices = { backEnd: [], frondEnd: [] };\r\n    }\r\n\r\n    /**\r\n     * Is called when databases are connected and adapter received configuration.\r\n     */\r\n    private async onReady(): Promise<void> {\r\n        // Initialize your adapter here\r\n\r\n        this.setState('info.connection', false, true);\r\n\r\n        /*\r\n        For every state in the system there has to be also an object of type state\r\n        Here a simple template for a boolean variable named \"testVariable\"\r\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\r\n        */\r\n        await this.setObjectNotExistsAsync('DS-Devices.VDC.running', {\r\n            type: 'state',\r\n            common: {\r\n                name: 'running',\r\n                type: 'boolean',\r\n                role: 'indicator',\r\n                read: true,\r\n                write: true,\r\n            },\r\n            native: {\r\n                Name: 'running',\r\n            },\r\n        });\r\n\r\n        this.allDevices = await this.refreshDeviceList();\r\n\r\n        dsDevices = [];\r\n        this.allDevices.backEnd.forEach((d: any) => {\r\n            this.log.info(JSON.stringify(d.dsConfig));\r\n            console.log(JSON.stringify(d.dsConfig));\r\n            if (typeof d.watchStateID == 'object') {\r\n                for (const [key, value] of Object.entries(d.watchStateID)) {\r\n                    this.log.debug(`subscribing to ${key} / ${value}`);\r\n                    this.subscribeForeignStates(value as string);\r\n                }\r\n            } else if (d.watchStateID && d.watchStateID.length > 0) {\r\n                this.log.debug(`subscribing to ${d.watchStateID}`);\r\n                this.subscribeForeignStates(d.watchStateID);\r\n            }\r\n            if (d.dsConfig) {\r\n                this.log.debug(`Pushing ${JSON.stringify(d.dsConfig)} to devices`);\r\n                dsDevices.push(d.dsConfig);\r\n            }\r\n        });\r\n\r\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n        // this.subscribeStates(\"testVariable\");\r\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n        // this.subscribeStates(\"lights.*\");\r\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise, this will cause a lot of unnecessary load on the system:\r\n        // this.subscribeStates(\"*\");\r\n\r\n        /*\r\n\t\t\tsetState examples\r\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\r\n\t\t*/\r\n        // the variable testVariable is set to true as command (ack=false)\r\n        // await this.setStateAsync(\"testVariable\", true);\r\n\r\n        // same thing, but the value is flagged \"ack\"\r\n        // ack should be always set to true if the value is received from or acknowledged from the target system\r\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\r\n\r\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\r\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\r\n\r\n        // examples for the checkPassword/checkGroup functions\r\n        /* let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\r\n        this.log.info(\"check user admin pw iobroker: \" + result);\r\n\r\n        result = await this.checkGroupAsync(\"admin\", \"admin\");\r\n        this.log.info(\"check group user admin group admin: \" + result);*/\r\n\r\n        this.log.debug(`dsDevices: ${JSON.stringify(this.allDevices.backEnd)}`);\r\n\r\n        const vdc = new libdsvdc({ debug: this.config.vdcDebug });\r\n\r\n        if (\r\n            this.config.vdcName &&\r\n            this.config.vdcName.length > 0 &&\r\n            this.config.vdcDSUID &&\r\n            this.config.vdcDSUID.length > 0 &&\r\n            this.config.vdcPort\r\n        ) {\r\n            this.log.info(`Connecting to VDC ${this.config.vdcName}`);\r\n            this.log.debug(`dsDevices vor dem start: ${JSON.stringify(dsDevices)}`);\r\n            vdc.start(\r\n                {\r\n                    vdcName: this.config.vdcName,\r\n                    vdcDSUID: this.config.vdcDSUID,\r\n                    port: this.config.vdcPort,\r\n                    configURL: this.config.vdcConfigURL,\r\n                },\r\n                dsDevices,\r\n            );\r\n            this.log.debug(`dsDevices nach dem start: ${JSON.stringify(dsDevices)}`);\r\n        }\r\n\r\n        this.vdc = vdc;\r\n\r\n        vdc.on('messageReceived', (msg: JSON) => {\r\n            this.log.debug(`MSG RECEIVED\" ${JSON.stringify(msg)}`);\r\n        });\r\n\r\n        vdc.on('messageSent', (msg: JSON) => {\r\n            this.log.debug(`MSG SENT\" ${JSON.stringify(msg)}`);\r\n        });\r\n\r\n        vdc.on('VDSM_NOTIFICATION_SET_CONTROL_VALUE', (msg: any) => {\r\n            this.log.debug(`received control value ${JSON.stringify(msg)}`);\r\n        });\r\n\r\n        vdc.on('VDSM_NOTIFICATION_SET_OUTPUT_CHANNEL_VALUE', (msg: any) => {\r\n            this.log.debug(`received OUTPUTCHANNELVALUE value ${JSON.stringify(msg)}`);\r\n\r\n            if (msg && msg.dSUID) {\r\n                msg.dSUID.forEach((id: string) => {\r\n                    const affectedDevice = this.allDevices.backEnd.find(\r\n                        (d: any) => d.dsConfig.dSUID.toLowerCase() == id.toLowerCase(),\r\n                    );\r\n                    if (affectedDevice) {\r\n                        // found the device -> it's an update for the device\r\n                        const affectedState = affectedDevice.watchStateID[msg.channelId];\r\n                        if (!affectedState) {\r\n                            return;\r\n                        }\r\n                        this.log.debug(\r\n                            `Received an update for state ${affectedState} in device ${affectedDevice.name} with value ${msg.value} and ${msg.applyNow}`,\r\n                        );\r\n                        this.setOutputChannel.push({\r\n                            name: msg.channelId,\r\n                            state: affectedState,\r\n                            value: msg.value,\r\n                        });\r\n                        const brightness = this.setOutputChannel.find((v) => v.name == 'brightness');\r\n                        if (brightness) {\r\n                            this.log.debug(`Brightness: ${brightness.value}`);\r\n                            if (brightness.value == 0) {\r\n                                const affectedStateSwitch = affectedDevice.watchStateID['switch'];\r\n                                this.setOutputChannel.push({\r\n                                    name: 'switch',\r\n                                    state: affectedStateSwitch,\r\n                                    value: false,\r\n                                });\r\n                            }\r\n                        } else {\r\n                            const affectedStateSwitch = affectedDevice.watchStateID['switch'];\r\n                            this.setOutputChannel.push({\r\n                                name: 'switch',\r\n                                state: affectedStateSwitch,\r\n                                value: true,\r\n                            });\r\n                        }\r\n                        this.setOutputChannel.forEach((c) => {\r\n                            this.setForeignStateAsync(c.state, {\r\n                                val: c.value,\r\n                                ack: false,\r\n                            }).then((error) => {\r\n                                if (error) {\r\n                                    /* this.log.error(\r\n                                        `Error performing update of the ${c.name} value (${c.value}) on ${affectedDevice.name} - ${error}`,\r\n                                    ); */\r\n                                } else {\r\n                                    this.log.debug(\r\n                                        `Successful update of ${c.name} to ${c.value} on ${affectedDevice.name}`,\r\n                                    );\r\n                                }\r\n                            });\r\n                        });\r\n                        this.setOutputChannel = [];\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        /*      vdc.on('VDSM_NOTIFICATION_SAVE_SCENE', (msg: any) => {\r\n            this.log.debug(`received save scene event ${JSON.stringify(msg)}`);\r\n            if (msg && msg.dSUID) {\r\n                msg.dSUID.forEach(async (id: string) => {\r\n                    // this.log.debug(`searching for ${id} in ${JSON.stringify(this.config.dsDevices)}`);\r\n                    const affectedDevice = this.allDevices.backEnd.find(\r\n                        (d: any) => d.dsConfig.dSUID.toLowerCase() == id.toLowerCase(),\r\n                    );\r\n                    if (affectedDevice) {\r\n                        // found device -> storing current values into devicearray\r\n                        if (affectedDevice.deviceType == 'rgbLamp') {\r\n                            //  rgbLamp\r\n                            let key: string;\r\n                            let value: any;\r\n                            const sceneVals: any = {};\r\n                            // get the info on switchModeColor\r\n                            const SMC: any = await this.getForeignStateAsync(\r\n                                affectedDevice.watchStateID.switchModeColor,\r\n                            );\r\n                            for ([key, value] of Object.entries(affectedDevice.watchStateID)) {\r\n                                const state: any = await this.getForeignStateAsync(value);\r\n                                if (!affectedDevice.scenes) {\r\n                                    affectedDevice.scenes = [];\r\n                                }\r\n\r\n                                // delete scene first\r\n                                let dC = false;\r\n\r\n                                switch (key) {\r\n                                    case 'colorTemp':\r\n                                        dC = SMC.val ? true : false;\r\n                                        break;\r\n                                    case 'hue':\r\n                                        dC = SMC.val ? false : true;\r\n                                        break;\r\n                                    case 'saturation':\r\n                                        dC = SMC.val ? false : true;\r\n                                        break;\r\n                                }\r\n                                sceneVals[key] = { value: state.val, dontCare: dC }; // TODO understand and make it dynamic\r\n                            }\r\n                            affectedDevice.scenes = affectedDevice.scenes.filter((d: any) => d.sceneId != msg.scene);\r\n                            affectedDevice.scenes.push({ sceneId: msg.scene, values: sceneVals });\r\n                            this.log.debug(\r\n                                `Set scene ${msg.scene} on ${affectedDevice.name} ::: ${JSON.stringify(\r\n                                    this.allDevices.backEnd,\r\n                                )}`,\r\n                            );\r\n                            // make it persistent by storing it back to the device\r\n                            await this.setObjectAsync(\r\n                                `digitalstrom-vdc.0.DS-Devices.configuredDevices.${affectedDevice.id}`,\r\n                                {\r\n                                    type: 'state',\r\n                                    common: {\r\n                                        name: affectedDevice.name,\r\n                                        type: 'boolean',\r\n                                        role: 'indicator',\r\n                                        read: true,\r\n                                        write: true,\r\n                                    },\r\n                                    native: {\r\n                                        deviceObj: affectedDevice,\r\n                                    },\r\n                                },\r\n                            ).then(async (success) => {\r\n                                this.log.debug(`Device created ${success}`);\r\n                                this.allDevices = await this.refreshDeviceList();\r\n                            });\r\n                        } else if (affectedDevice.deviceType == 'lamp') {\r\n                            // lamp -> store nothing since only power on / off is supported\r\n\r\n                            let key: string;\r\n                            let value: any;\r\n                            const sceneVals: any = {};\r\n\r\n                            for ([key, value] of Object.entries(affectedDevice.watchStateID)) {\r\n                                const state: any = await this.getForeignStateAsync(value);\r\n                                if (!affectedDevice.scenes) {\r\n                                    affectedDevice.scenes = [];\r\n                                }\r\n\r\n                                // delete scene first\r\n                                const dC = false;\r\n\r\n                                sceneVals[key] = { value: state.val, dontCare: dC }; // TODO understand and make it dynamic\r\n                            }\r\n\r\n                            affectedDevice.scenes = affectedDevice.scenes.filter((d: any) => d.sceneId != msg.scene);\r\n                            affectedDevice.scenes.push({ sceneId: msg.scene, values: sceneVals });\r\n                            this.log.debug(\r\n                                `Set scene ${msg.scene} on ${affectedDevice.name} ::: ${JSON.stringify(\r\n                                    this.allDevices.backEnd,\r\n                                )}`,\r\n                            );\r\n                            // make it persistent by storing it back to the device\r\n                            await this.setObjectAsync(\r\n                                `digitalstrom-vdc.0.DS-Devices.configuredDevices.${affectedDevice.id}`,\r\n                                {\r\n                                    type: 'state',\r\n                                    common: {\r\n                                        name: affectedDevice.name,\r\n                                        type: 'boolean',\r\n                                        role: 'indicator',\r\n                                        read: true,\r\n                                        write: true,\r\n                                    },\r\n                                    native: {\r\n                                        deviceObj: affectedDevice,\r\n                                    },\r\n                                },\r\n                            ).then(async (success) => {\r\n                                this.log.debug(`Device created ${success}`);\r\n                                this.allDevices = await this.refreshDeviceList();\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });*/\r\n\r\n        vdc.on('VDSM_NOTIFICATION_SAVE_SCENE', (msg: any) => {\r\n            this.log.debug(`received save scene event ${JSON.stringify(msg)}`);\r\n            if (msg && msg.dSUID) {\r\n                msg.dSUID.forEach(async (id: string) => {\r\n                    // this.log.debug(`searching for ${id} in ${JSON.stringify(this.config.dsDevices)}`);\r\n                    const affectedDevice = this.allDevices.backEnd.find(\r\n                        (d: any) => d.dsConfig.dSUID.toLowerCase() == id.toLowerCase(),\r\n                    );\r\n                    let dontCare: any;\r\n                    if (affectedDevice) {\r\n                        // found device -> looking if scene is already available\r\n                        const dScene = affectedDevice.scenes.find((s: any) => {\r\n                            return s.sceneId == msg.scene;\r\n                        });\r\n                        if (dScene) {\r\n                            // scene is already defined... loop it and get value for dc\r\n                            let key: any;\r\n                            let value: any;\r\n                            this.log.debug(\r\n                                `looking for dontCare value inside scene ${msg.scene} -> ${JSON.stringify(dScene)}`,\r\n                            );\r\n                            for ([key, value] of Object.entries(dScene.values)) {\r\n                                if (key == 'dontCare') dontCare = value; // set dontCare to current SceneValue\r\n                            }\r\n                        } else dontCare = false; //if Scene not defined until now set dontCare to false\r\n                        const sceneVals: any = {};\r\n                        let key: any;\r\n                        let value: any;\r\n                        for ([key, value] of Object.entries(affectedDevice.watchStateID)) {\r\n                            const state: any = await this.getForeignStateAsync(value);\r\n                            if (!affectedDevice.scenes) {\r\n                                affectedDevice.scenes = [];\r\n                            }\r\n                            sceneVals[key] = { value: state.val, dontCare: dontCare }; // set SceneValues\r\n                        }\r\n                        affectedDevice.scenes = affectedDevice.scenes.filter((d: any) => d.sceneId != msg.scene);\r\n                        affectedDevice.scenes.push({ sceneId: msg.scene, values: sceneVals });\r\n                        this.log.debug(\r\n                            `Set scene ${msg.scene} on ${affectedDevice.name} ::: ${JSON.stringify(\r\n                                this.allDevices.backEnd,\r\n                            )}`,\r\n                        );\r\n                        // make it persistent by storing it back to the device\r\n                        await this.setObjectAsync(\r\n                            `digitalstrom-vdc.0.DS-Devices.configuredDevices.${affectedDevice.id}`,\r\n                            {\r\n                                type: 'state',\r\n                                common: {\r\n                                    name: affectedDevice.name,\r\n                                    type: 'boolean',\r\n                                    role: 'indicator',\r\n                                    read: true,\r\n                                    write: true,\r\n                                },\r\n                                native: {\r\n                                    deviceObj: affectedDevice,\r\n                                },\r\n                            },\r\n                        ).then(async (success) => {\r\n                            this.log.debug(`Device created ${success}`);\r\n                            this.allDevices = await this.refreshDeviceList();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        vdc.on('VDSM_NOTIFICATION_CALL_SCENE', (msg: any) => {\r\n            this.log.debug(`received call scene event ${JSON.stringify(msg)}`);\r\n            // search if the dsUID is known\r\n            if (msg && msg.dSUID) {\r\n                msg.dSUID.forEach((id: string) => {\r\n                    const affectedDevice = this.allDevices.backEnd.find(\r\n                        (d: any) => d.dsConfig.dSUID.toLowerCase() == id.toLowerCase(),\r\n                    );\r\n                    this.log.debug(JSON.stringify(affectedDevice));\r\n                    const dScene = affectedDevice.scenes.find((s: any) => {\r\n                        return s.sceneId == msg.scene;\r\n                    });\r\n                    if (dScene) {\r\n                        // scene is defined... loop it and set all values\r\n                        let key: any;\r\n                        let value: any;\r\n                        this.log.debug(`looping the values inside scene ${msg.scene} -> ${JSON.stringify(dScene)}`);\r\n                        for ([key, value] of Object.entries(dScene.values)) {\r\n                            this.log.debug(\r\n                                `performing update on state: ${key} ${JSON.stringify(\r\n                                    affectedDevice.watchStateID,\r\n                                )} with key ${key} value ${value.value}`,\r\n                            );\r\n                            // if (key == \"switch\") value.value = true; // set power state on\r\n                            this.log.debug(\r\n                                `setting ${value.value} of ${affectedDevice.name} to on ${affectedDevice.watchStateID[key]}`,\r\n                            );\r\n                            this.setForeignState(affectedDevice.watchStateID[key], value.value);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        vdc.on('channelStatesRequest', async (msg: any) => {\r\n            this.log.debug(`received request for channel status ${JSON.stringify(msg)}`);\r\n            // search if the dsUID is known\r\n            if (!(msg && msg.dSUID)) {\r\n                return;\r\n            }\r\n            const affectedDevice = this.allDevices.backEnd.find(\r\n                (d: any) => d.dsConfig.dSUID.toLowerCase() == msg.dSUID.toLowerCase(),\r\n            );\r\n            this.log.debug('FOUND DEVICE: ' + JSON.stringify(affectedDevice));\r\n            for (const e of msg.names) {\r\n                this.log.debug(`searching state on ${affectedDevice.name} for state ${e}`);\r\n                const affectedState = affectedDevice.watchStateID[e];\r\n                if (affectedState) {\r\n                    this.log.debug(\r\n                        `Received request for status for device  ${affectedDevice.name} and state ${affectedState}`,\r\n                    );\r\n                    const state: any = await this.getForeignStateAsync(affectedState);\r\n                    this.log.debug('msg value from state: ' + JSON.stringify(state));\r\n                    const subElement = {\r\n                        name: e,\r\n                        elements: [\r\n                            { name: 'value', value: { vDouble: state.val } },\r\n                            { name: 'age', value: { vDouble: 1 } },\r\n                        ],\r\n                    };\r\n                    vdc.sendComplexState(msg.messageId, subElement);\r\n                } else {\r\n                    this.log.error(`The device ${affectedDevice.name} has no watchState for ${e}`);\r\n                }\r\n            }\r\n            {\r\n                // send generic response\r\n                vdc.sendState(msg.value, msg.messageId);\r\n            }\r\n        });\r\n\r\n        vdc.on('binaryInputStateRequest', async (msg: any) => {\r\n            this.log.debug(`received request for binaryInputStateRequest ${JSON.stringify(msg)}`);\r\n\r\n            // search if the dsUID is known\r\n            if (msg && msg.dSUID) {\r\n                const affectedDevice = this.allDevices.backEnd.find(\r\n                    (d: any) => d.dsConfig.dSUID.toLowerCase() == msg.dSUID.toLowerCase(),\r\n                );\r\n                this.log.debug(`found device ${JSON.stringify(affectedDevice)}`);\r\n                if (affectedDevice && affectedDevice.deviceType == 'presenceSensor') {\r\n                    // const state: any = await this.getForeignStateAsync(affectedDevice.watchStateID);\r\n                    // const state: any = await getFState(affectedDevice.watchStateID);\r\n                    // this.log.debug(\"msg value from state: \" + JSON.stringify(state));\r\n                    // msg.value = state.val ? 1 : 0;\r\n                    // this.log.debug(\"msg value from state: \" + msg.value);\r\n                    const inputStates: Array<any> = [];\r\n                    affectedDevice.dsConfig.binaryInputDescriptions.forEach((i: any) => {\r\n                        inputStates.push({\r\n                            name: i.objName,\r\n                            age: 1,\r\n                            value: null,\r\n                        });\r\n                    });\r\n                    vdc.sendBinaryInputState(inputStates, msg.messageId);\r\n                } else if (affectedDevice && affectedDevice.deviceType == 'binarySensor') {\r\n                    const elements: Array<any> = [];\r\n                    for (const [key, value] of Object.entries(affectedDevice.watchStateID)) {\r\n                        const subState = await this.getForeignStateAsync(value as string);\r\n                        if (subState) {\r\n                            elements.push({\r\n                                name: key as string,\r\n                                elements: [\r\n                                    { name: 'age', value: { vDouble: 1 } },\r\n                                    { name: 'error', value: { vUint64: '0' } },\r\n                                    { name: 'value', value: { vBool: subState.val } },\r\n                                ],\r\n                            });\r\n                        }\r\n                    }\r\n                    vdc.sendComplexState(msg.messageId, elements);\r\n                } else {\r\n                    // send generic response\r\n                    vdc.sendState(msg.value, msg.messageId);\r\n                }\r\n            }\r\n        });\r\n\r\n        vdc.on('binaryInputStateRequest', async (msg: any) => {\r\n            this.log.info(`received request for binaryInputStateRequest ${JSON.stringify(msg)}`);\r\n            // search if the dsUID is known\r\n            if (msg && msg.dSUID) {\r\n                const affectedDevice = this.allDevices.backEnd.find(\r\n                    (d: any) => d.dsConfig.dSUID.toLowerCase() == msg.dSUID.toLowerCase(),\r\n                );\r\n                this.log.debug(`found device ${JSON.stringify(affectedDevice)}`);\r\n                const elements: Array<any> = [];\r\n                for (const [key, value] of Object.entries(affectedDevice.watchStateID)) {\r\n                    const subState = await this.getForeignStateAsync(value as string);\r\n                    if (subState) {\r\n                        elements.push({\r\n                            name: key as string,\r\n                            elements: [\r\n                                { name: 'age', value: { vDouble: 1 } },\r\n                                { name: 'error', value: { vUint64: '0' } },\r\n                                { name: 'value', value: { vBool: subState.val } },\r\n                            ],\r\n                        });\r\n                    }\r\n                    vdc.sendComplexState(msg.messageId, elements);\r\n                }\r\n            } else {\r\n                // send generic response\r\n                vdc.sendState(msg.value, msg.messageId);\r\n            }\r\n        });\r\n\r\n        vdc.on('vdcRunningState', () => {\r\n            this.setStateAsync('DS-Devices.VDC.running', { val: true, ack: true });\r\n            this.log.debug(`VDC <${this.config.vdcName}> is running on port ${this.config.vdcPort}`);\r\n        });\r\n\r\n        vdc.on('deviceZoneChange', (msg: any) => {\r\n            this.log.debug(`deviceZoneChange event received with the following information ${JSON.stringify(msg)}`);\r\n        });\r\n\r\n        vdc.on('updateDeviceValues', async (msg: any) => {\r\n            this.log.debug(`deviceUpdate received with the following information ${JSON.stringify(msg)}`);\r\n            const affectedDevice = this.allDevices.backEnd.find(\r\n                (d: any) => d.dsConfig.dSUID.toLowerCase() == msg.dSUID.toLowerCase(),\r\n            );\r\n            if (affectedDevice) {\r\n                affectedDevice.dsConfig = msg;\r\n                await this.setObjectAsync(`digitalstrom-vdc.0.DS-Devices.configuredDevices.${affectedDevice.id}`, {\r\n                    type: 'state',\r\n                    common: {\r\n                        name: affectedDevice.name,\r\n                        type: 'boolean',\r\n                        role: 'indicator',\r\n                        read: true,\r\n                        write: true,\r\n                    },\r\n                    native: {\r\n                        deviceObj: affectedDevice,\r\n                    },\r\n                }).then(async (success) => {\r\n                    this.log.debug(`Device created ${success}`);\r\n                    this.allDevices = await this.refreshDeviceList();\r\n                });\r\n            }\r\n        });\r\n        this.setState('info.connection', true, true); // TODO check right place?\r\n    }\r\n\r\n    /**\r\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n     */\r\n    private onUnload(callback: () => void): void {\r\n        try {\r\n            // Here you must clear all timeouts or intervals that may still be active\r\n            // clearTimeout(timeout1);\r\n            // clearTimeout(timeout2);\r\n            // ...\r\n            // clearInterval(interval1);\r\n\r\n            // TODO end all connections and such here!!\r\n\r\n            callback();\r\n        } catch (e) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n    // /**\r\n    //  * Is called if a subscribed object changes\r\n    //  */\r\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n    // \tif (obj) {\r\n    // \t\t// The object was changed\r\n    // \t\tthis.log.debug(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n    // \t} else {\r\n    // \t\t// The object was deleted\r\n    // \t\tthis.log.debug(`object ${id} deleted`);\r\n    // \t}\r\n    // }\r\n\r\n    /**\r\n     * private function used to fill the alldevices array\r\n     * @private\r\n     */\r\n    private async refreshDeviceList(): Promise<any> {\r\n        interface GetObjectViewItem {\r\n            /** The ID of this object */\r\n            id: string;\r\n            /** A copy of the object from the DB */\r\n            value: ioBroker.Object | null;\r\n        }\r\n\r\n        return await this.getObjectViewAsync('digitalstrom-vdc', 'listDevicesFullObj', {\r\n            startkey: 'digitalstrom-vdc.' + this.instance + '.',\r\n            endkey: 'digitalstrom-vdc.' + this.instance + '.\\u9999',\r\n        }).then((doc: { rows: GetObjectViewItem[] }) => {\r\n            if (doc && doc.rows) {\r\n                const deviceObjects: any = { backEnd: [], frondEnd: [] };\r\n                for (let i = 0; i < doc.rows.length; i++) {\r\n                    const id = doc.rows[i].id;\r\n                    const obj: any = doc.rows[i].value;\r\n                    if (obj && Object.keys(obj).length > 0) {\r\n                        if (\r\n                            obj.deviceObj &&\r\n                            typeof obj.deviceObj == 'object' &&\r\n                            Object.keys(obj.deviceObj).length > 0\r\n                        ) {\r\n                            // TODO check old code: if (obj.deviceObj.dsConfig) {\r\n                            this.log.debug('Found ' + id + ': ' + JSON.stringify(obj.deviceObj));\r\n                            this.log.debug('Found ' + id + ': ' + JSON.stringify(obj));\r\n                            deviceObjects.backEnd.push(obj.deviceObj.native.deviceObj);\r\n                            deviceObjects.frondEnd.push(obj.deviceObj);\r\n                        }\r\n                    }\r\n                }\r\n                if (!doc.rows.length) console.log('No objects found.');\r\n                this.log.debug('add deviceObjects: ' + JSON.stringify(deviceObjects.backEnd));\r\n                return deviceObjects;\r\n            } else {\r\n                console.log('No objects found: ');\r\n                return [];\r\n            }\r\n        });\r\n    }\r\n\r\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n    // /**\r\n    //  * Is called if a subscribed object changes\r\n    //  */\r\n    private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n        if (obj) {\r\n            // The object was changed\r\n            this.log.debug(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n        } else {\r\n            // The object was deleted\r\n            this.log.debug(`object ${id} deleted`);\r\n        }\r\n    }\r\n\r\n    // TODO: This function is not used, should be checked, if not, required delete Greeting issi\r\n    private async replyMultiSensor(affectedDevice: any): Promise<void> {\r\n        const elements: Array<any> = [];\r\n        for (const [key, value] of Object.entries(affectedDevice.watchStateID)) {\r\n            const subState = await this.getForeignStateAsync(value as string);\r\n            if (subState) {\r\n                elements.push({\r\n                    name: key as string,\r\n                    elements: [\r\n                        { name: 'age', value: { vDouble: 10 } },\r\n                        { name: 'error', value: { vUint64: '0' } },\r\n                        { name: 'value', value: { vDouble: subState.val } },\r\n                    ],\r\n                });\r\n            }\r\n        }\r\n        this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n            {\r\n                name: 'sensorStates',\r\n                elements: elements,\r\n            },\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Is called if a subscribed state changes\r\n     */\r\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        if (state) {\r\n            // The state was changed\r\n            //this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\r\n            // inform vdc\r\n            const affectedDevice = this.allDevices.backEnd.find(\r\n                (d: any) => d.watchStateID == id || Object.values(d.watchStateID).indexOf(id) > -1,\r\n            );\r\n            if (affectedDevice && typeof affectedDevice.watchStateID == 'object') {\r\n                const updateName = Object.keys(affectedDevice.watchStateID).find(\r\n                    (key) => affectedDevice.watchStateID[key] === id,\r\n                );\r\n                if (affectedDevice.deviceType == 'multiSensor') {\r\n                    // this.replyMultiSensor(affectedDevice);\r\n                    if (\r\n                        affectedDevice.modifiers &&\r\n                        typeof affectedDevice.modifiers == 'object' &&\r\n                        updateName &&\r\n                        affectedDevice.modifiers[updateName]\r\n                    ) {\r\n                        state.val = (state.val as number) * parseFloat(affectedDevice.modifiers[updateName]);\r\n                    }\r\n                    this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                        {\r\n                            name: 'sensorStates',\r\n                            elements: [\r\n                                {\r\n                                    name: updateName,\r\n                                    elements: [\r\n                                        { name: 'age', value: null },\r\n                                        { name: 'error', value: { vUint64: '0' } },\r\n                                        { name: 'value', value: { vDouble: state.val } },\r\n                                    ],\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]);\r\n                } else if (affectedDevice.deviceType == 'sensor') {\r\n                    if (\r\n                        affectedDevice.modifiers &&\r\n                        typeof affectedDevice.modifiers == 'object' &&\r\n                        updateName &&\r\n                        affectedDevice.modifiers[updateName]\r\n                    ) {\r\n                        state.val = (state.val as number) * parseFloat(affectedDevice.modifiers[updateName]);\r\n                    }\r\n                    this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                        {\r\n                            name: 'sensorStates',\r\n                            elements: [\r\n                                {\r\n                                    name: updateName,\r\n                                    elements: [\r\n                                        { name: 'age', value: { vDouble: 0.1 } },\r\n                                        { name: 'error', value: { vUint64: '0' } },\r\n                                        { name: 'value', value: { vDouble: state.val } },\r\n                                    ],\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]);\r\n                } else if (affectedDevice.deviceType == 'presenceSensor') {\r\n                    const newState = state.val ? 1 : 0;\r\n                    this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                        {\r\n                            name: 'binaryInputStates',\r\n                            elements: [\r\n                                {\r\n                                    name: updateName,\r\n                                    elements: [\r\n                                        { name: 'age', value: { vDouble: 1 } },\r\n                                        { name: 'error', value: { vUint64: '0' } },\r\n                                        { name: 'value', value: { vBool: newState } },\r\n                                    ],\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]);\r\n                } else if (affectedDevice.deviceType == 'binarySensor') {\r\n                    const newState = state.val ? 1 : 0;\r\n                    this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                        {\r\n                            name: 'binaryInputStates',\r\n                            elements: [\r\n                                {\r\n                                    name: updateName,\r\n                                    elements: [\r\n                                        { name: 'age', value: { vDouble: 1 } },\r\n                                        { name: 'error', value: { vUint64: '0' } },\r\n                                        { name: 'value', value: { vBool: newState } },\r\n                                    ],\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]);\r\n                } else if (affectedDevice.deviceType == 'smokeAlarm') {\r\n                    const newState = state.val ? 1 : 0;\r\n                    this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                        {\r\n                            name: 'binaryInputStates',\r\n                            elements: [\r\n                                {\r\n                                    name: updateName,\r\n                                    elements: [\r\n                                        { name: 'age', value: { vDouble: 1 } },\r\n                                        { name: 'error', value: { vUint64: '0' } },\r\n                                        { name: 'value', value: { vBool: newState } },\r\n                                    ],\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]);\r\n                } else if (affectedDevice.deviceType == 'button') {\r\n                    let newState = 0;\r\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n                    // @ts-ignore\r\n                    if (state && state.val >= 0 && state.val <= 14) newState = state.val;\r\n\r\n                    this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                        {\r\n                            name: 'buttonInputStates',\r\n                            elements: [\r\n                                {\r\n                                    name: updateName,\r\n                                    elements: [\r\n                                        { name: 'age', value: { vDouble: 1 } },\r\n                                        { name: 'clickType', value: { vUint64: newState } },\r\n                                        { name: 'error', value: { vUint64: '0' } },\r\n                                        { name: 'value', value: { vBool: 0 } },\r\n                                    ],\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]);\r\n                } else if (affectedDevice.deviceType == 'awayButton') {\r\n                    // const newState = state.val ? 1 : 0;\r\n                    this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                        {\r\n                            name: 'buttonInputStates',\r\n                            elements: [\r\n                                {\r\n                                    name: updateName,\r\n                                    elements: [\r\n                                        { name: 'age', value: { vDouble: 1 } },\r\n                                        { name: 'clickType', value: { vUint64: 4 } },\r\n                                        { name: 'error', value: { vUint64: '0' } },\r\n                                        { name: 'value', value: { vBool: 0 } },\r\n                                    ],\r\n                                },\r\n                            ],\r\n                        },\r\n                    ]);\r\n                    setTimeout(() => {\r\n                        this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                            {\r\n                                name: 'buttonInputStates',\r\n                                elements: [\r\n                                    {\r\n                                        name: updateName,\r\n                                        elements: [\r\n                                            { name: 'age', value: { vDouble: 1 } },\r\n                                            { name: 'clickType', value: { vUint64: 6 } },\r\n                                            { name: 'error', value: { vUint64: '0' } },\r\n                                            { name: 'value', value: { vBool: 0 } },\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ]);\r\n                    }, 3.5 * 1000);\r\n                } else if (affectedDevice.deviceType == 'doorbell') {\r\n                    // const newState = state.val ? 1 : 0;\r\n                    if (state.val) {\r\n                        // send event only if val is true\r\n                        this.vdc.sendUpdate(affectedDevice.dsConfig.dSUID, [\r\n                            {\r\n                                name: 'buttonInputStates',\r\n                                elements: [\r\n                                    {\r\n                                        name: updateName,\r\n                                        elements: [\r\n                                            { name: 'age', value: { vDouble: 1 } },\r\n                                            { name: 'clickType', value: { vUint64: 0 } },\r\n                                            { name: 'error', value: { vUint64: '0' } },\r\n                                            { name: 'value', value: { vBool: 0 } },\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // The state was deleted\r\n            this.log.debug(`state ${id} deleted`);\r\n        }\r\n    }\r\n\r\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n    // /**\r\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n    //  */\r\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\r\n        const respond = (response: any): void => {\r\n            if (obj.callback) this.sendTo(obj.from, obj.command, response, obj.callback);\r\n        };\r\n        // some predefined responses, so we only have to define them once\r\n        const responses = {\r\n            ACK: { error: null },\r\n            OK: { error: null, result: 'ok' },\r\n            ERROR_UNKNOWN_COMMAND: { error: 'Unknown command!' },\r\n            MISSING_PARAMETER: (paramName: string) => {\r\n                return { error: 'missing parameter \"' + paramName + '\"!' };\r\n            },\r\n            COMMAND_ACTIVE: { error: 'command already active' },\r\n            RESULT: (result: unknown) => ({ error: null, result }),\r\n            ERROR: (error: string) => ({ error }),\r\n        };\r\n        this.log.debug(`received onMessage ${JSON.stringify(obj)}`);\r\n        if (typeof obj === 'object') {\r\n            switch (obj.command) {\r\n                case 'addNewDevice': {\r\n                    this.log.debug('Add devices command received ' + JSON.stringify(obj));\r\n                    try {\r\n                        const deviceObj = obj.message as any;\r\n                        this.log.debug(JSON.stringify(deviceObj));\r\n                        await this.setObjectNotExistsAsync(`DS-Devices.configuredDevices.${deviceObj.id}`, {\r\n                            type: 'state',\r\n                            common: {\r\n                                name: deviceObj.name,\r\n                                type: 'boolean',\r\n                                role: 'indicator',\r\n                                read: true,\r\n                                write: true,\r\n                            },\r\n                            native: {\r\n                                deviceObj,\r\n                            },\r\n                        });\r\n                        await this.setStateAsync(`DS-Devices.configuredDevices.${deviceObj.id}`, true);\r\n                        this.allDevices = await this.refreshDeviceList();\r\n                        return respond(responses.OK);\r\n                        //\r\n                    } catch (err: any) {\r\n                        console.error('Error while parsing object', err);\r\n                        return respond(responses.ERROR(err));\r\n                    }\r\n                }\r\n                case 'VanishDevice': {\r\n                    this.log.debug(`sendVanishDevice command receveid for device ${obj.message}`);\r\n                    break;\r\n                }\r\n                case 'ListDevices': {\r\n                    this.allDevices = await this.refreshDeviceList();\r\n                    this.log.debug(`sendToListDevices - ${JSON.stringify(this.allDevices.frondEnd)}`);\r\n                    return respond(responses.RESULT(this.allDevices.frondEnd));\r\n                }\r\n                case 'RemoveDevice': {\r\n                    this.log.debug(`Remove device for ${JSON.stringify(obj.message)} received`);\r\n                    const deviceObj = obj.message as any;\r\n                    this.log.debug(`removing ${deviceObj._id}`);\r\n                    await this.delObject(deviceObj._id as string);\r\n                    this.log.debug(`Device ${JSON.stringify(obj.message)} successfully removed`);\r\n                    // if (deviceObj.dSUID) this.vdc.sendVanish(deviceObj.dSUID as string);\r\n                    this.allDevices = await this.refreshDeviceList();\r\n                    return respond(responses.OK);\r\n                }\r\n                case 'getHostIp': {\r\n                    this.log.debug(`getHostIp command received`);\r\n                    const hostObj = await this.getForeignObjectAsync(`system.host.${this.host}`);\r\n                    const ipv4 = hostObj?.common.address.filter((ip: string) => ip.includes('.'));\r\n                    return respond(responses.RESULT(ipv4));\r\n                }\r\n            }\r\n\r\n            /* TODO check old stuff from other brancch!\r\n\r\n\t\t\t            if (obj.command === \"send\") {\r\n                // e.g. send email or pushover or whatever\r\n                this.log.debug(\"send command\");\r\n\r\n                // Send response in callback if required\r\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n            }\r\n            if (obj.command === \"genSDUID\") {\r\n                this.log.debug(\"genSDUID command receveid\");\r\n                if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n            }\r\n\r\n            if (obj.command === \"getRunning\") {\r\n                // this.log.debug(\"getRunning command received\");\r\n                this.getState(\"DS-Devices.VDC.running\", (error, state) => {\r\n                    //this.log.debug(JSON.stringify(state));\r\n                    // this.log.debug(JSON.stringify(obj));\r\n                    if (obj.callback) this.sendTo(obj.from, obj.command, { state }, obj.callback);\r\n                });\r\n            }\r\n\r\n            if (obj.command === \"sendVanishDevice\") {\r\n                this.log.debug(`sendVanishDevice command receveid for device ${obj.message}`);\r\n            }\r\n\r\n            if (obj.command === \"sendListDevices\") {\r\n                this.log.debug(`sendListDevices command receveid`);\r\n                /* this.getStates(\"DS-Devices.configuredDevices.*\", (error, devices) => {\r\n                    this.log.debug(`the following devices are configured on the system ${JSON.stringify(devices)}`);\r\n                    if (obj.callback) this.sendTo(obj.from, obj.command, { devices }, obj.callback);\r\n                }); */\r\n            /*\r\n\t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, this.allDevices, obj.callback);\r\n\t\t}\r\n\r\n\t\tif (obj.command === \"sendRemoveDevice\") {\r\n\t\t\tthis.log.debug(`Remove device for ${JSON.stringify(obj.message)} received`);\r\n\t\t\tconst deviceObj = obj.message as any;\r\n\t\t\tthis.delObject(`DS-Devices.configuredDevices.${deviceObj.id as string}`, async (error: any) => {\r\n\t\t\t\tthis.log.debug(`Device ${JSON.stringify(obj.message)} successfully with message ${error} removed`);\r\n\t\t\t\tthis.log.debug(JSON.stringify(deviceObj));\r\n\t\t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, {}, obj.callback);\r\n\r\n\t\t\t\tif (deviceObj.dSUID) this.vdc.sendVanish(deviceObj.dSUID as string);\r\n\t\t\t\tthis.allDevices = await this.refreshDeviceList();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (obj.command === \"sendAddDevice\") {\r\n\t\t\tthis.log.debug(\"Add devices command received \" + JSON.stringify(obj));\r\n\t\t\ttry {\r\n\t\t\t\tconst deviceObj = obj.message as any;\r\n\t\t\t\tthis.log.debug(JSON.stringify(deviceObj));\r\n\t\t\t\tthis.setObjectNotExistsAsync(`DS-Devices.configuredDevices.${deviceObj.id}`, {\r\n\t\t\t\t\ttype: \"state\",\r\n\t\t\t\t\tcommon: {\r\n\t\t\t\t\t\tname: deviceObj.name,\r\n\t\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\t\trole: \"indicator\",\r\n\t\t\t\t\t\tread: true,\r\n\t\t\t\t\t\twrite: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnative: {\r\n\t\t\t\t\t\tdeviceObj,\r\n\t\t\t\t\t},\r\n\t\t\t\t}).then(async (success) => {\r\n\t\t\t\t\tthis.log.debug(`Device created ${success}`);\r\n\t\t\t\t\tawait this.setStateAsync(`DS-Devices.configuredDevices.${deviceObj.id}`, true);\r\n\t\t\t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, { deviceObj }, obj.callback);\r\n\t\t\t\t\tthis.allDevices = await this.refreshDeviceList();\r\n\t\t\t\t});\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(\"Error while parsing object\", err);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t */\r\n        }\r\n    }\r\n}\r\n\r\nif (require.main !== module) {\r\n    // Export the constructor in compact mode\r\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new DigitalstromVdc(options);\r\n} else {\r\n    // otherwise start the instance directly\r\n    (() => new DigitalstromVdc())();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
